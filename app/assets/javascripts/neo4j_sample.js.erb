
var Drawing = Drawing || {};

Drawing.Neo4jGraph = function(options) {

  var options = options || {};

  this.layout = options.layout || "2d";
  this.layout_options = options.graphLayout || {};
  this.show_stats = options.showStats || true;
  this.show_info = options.showInfo || false;
  this.selection = options.selection || false;
  this.limit = options.limit || 10;
  this.nodes_count = options.numNodes || 20;
  this.edges_count = options.numEdges || 10;

  var camera, scene, renderer, interaction, geometry, object_selection;
  var stats;
  var info_text = {};
  var graph = new Graph({limit: options.limit});

  var geometries = [];

  var that=this;

  var neo4j_host = options.neo4j_host || 'http://localhost:7474/db/data';
  var neo4j_root = "/node/" + (options.node_id || 0);
  var node_queue = [];
  var finished = false;
  var num_requests = 0;
  
  var geometries = [];
  var info;
  
  var root_relationships = [];
  
  var start, end;

  init();
  createGraph();
  animate();

  function init() {
    // Three.js initialization
    renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize( window.innerWidth, window.innerHeight );

    // camera = new THREE.Camera( 75, window.innerWidth / window.innerHeight, 1, 1000000 );
    camera = new THREE.TrackballCamera({
      fov: 40, 
      aspect: window.innerWidth / window.innerHeight,
      near: 1,
      far: 1e5, //1e3,

      rotateSpeed: 1.0,
      zoomSpeed: 1.2,
      panSpeed: 0.8,

      noZoom: false,
      noPan: false,

      staticMoving: false,
      dynamicDampingFactor: 0.3,

      domElement: renderer.domElement,

      keys: [ 65, 83, 68 ]
    });

    camera.position.z = 5000;
    // camera.useTarget = false;

    scene = new THREE.Scene();

    // Node geometry
    if(that.layout === "3d") {
      geometry = new THREE.SphereGeometry( 50, 50, 50 );
    } else {
      geometry = new THREE.SphereGeometry( 50, 50, 0 );
    }

    if(that.selection) {
      object_selection = new THREE.ObjectSelection({
        domElement: renderer.domElement,
        selected: function(obj) {
          // display info
          if(obj != null) {
            info_text.select = "Object " + obj.id;
          } else {
            delete info_text.select;
          }
        }
      });
    }

    var object = new THREE.Trident();
    object.position.x = 0;
    object.position.z = 0;
    object.scale.x = object.scale.y = object.scale.z = 5;
    scene.addObject( object );  

    document.body.appendChild( renderer.domElement );

    // Stats.js
    if(that.show_stats) {
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.top = '0px';
      document.body.appendChild( stats.domElement );
    }

    if(that.show_info) {
      var info = document.createElement("div");
      var id_attr = document.createAttribute("id");
      id_attr.nodeValue = "graph-info";
      info.setAttributeNode(id_attr);
      document.body.appendChild( info );
    }  
  }


  function createGraph() {
    console.log(neo4j_host + neo4j_root);
    start = new Date().getTime();
    $.getJSON(neo4j_host + neo4j_root, function(db_node) {

      $.getJSON(db_node.outgoing_relationships, function(relationships) {
        root_relationships = relationships;
        getRelationshipNode();
      });
    });

    that.layout_options.width = that.layout_options.width || 2000;
    that.layout_options.height = that.layout_options.height || 2000;
    that.layout_options.iterations = that.layout_options.iterations || 2000;
    that.layout_options.layout = that.layout_options.layout || that.layout;
    graph.layout = new Layout.ForceDirected(graph, that.layout_options);
    graph.layout.init();
  }


  function getRelationshipNode() {
    if(root_relationships.length < 1) {
      return;
    }
    
    var relationship = root_relationships.shift();
    if(relationship != undefined) {
      $.getJSON(relationship.end, function(relationship_node) {
        if(graph.reached_limit()) {
          return;
        }
        // server_node.self is an url, so split by '/'
        // var node_parts = relationship_node.self.split("/");

        // last entry is the node id
        var node_id = getNodeId(relationship_node);
        
        var client_node1 = graph.getNode(node_id);
        if(client_node1 == undefined) {
          client_node1 = new Node(node_id);
          if(graph.addNode(client_node1)) {
            console.log("NODE CREATED");
            drawNode(client_node1);
            node_queue.push(relationship_node);
            finished = false;
          }
        } else {
          return; // node exists already
        }
      });
    }
  }


  /** 
      Gets the outgoing relationships from a node from the queue. 
      For each outgoing relationship it requests the target node and creates
      it in the graph if it not exist.
   */
  function getNodes() {
    if(graph.reached_limit()) {
      finished = true;
      return false;
    }

    // if(finished == true && node_queue.length == 0) {
    //   getRelationshipNode();
    // } 

    if(finished == false && node_queue.length > 0) {

      // db_node = JSON-Object from Neo4j    
      var db_node = node_queue.shift(); // get first node and remove from queue
      if(db_node != undefined) {
        
        var node_id = getNodeId(db_node);
        var node = graph.getNode(node_id);
        if(node == undefined) {
          return;
        }

        num_requests++;
  
        // relationships = Array with all Relationships from Neo4J
        $.getJSON( db_node.outgoing_relationships, function(relationships) {

          num_requests--;

          // relationship = JSON-Object with relationship
          var rel_length = relationships.length;
          for(var i=0; i < rel_length; i++ ) {
            relationship = relationships[i];
          
            if(graph.reached_limit()) {
              return;
            }

            var rel_type = relationship.type;
            $.getJSON(relationship.end, function(target_db_node) {

              if(graph.reached_limit()) {
                return;
              } 

              finished = false;

              var target_node_id = getNodeId(target_db_node);
              var target_node = graph.getNode(target_node_id);

              // check if node exist in graph
              if(target_node == undefined) {
                // create node
                target_node = new Node(target_node_id);
                if(graph.addNode(target_node)) {
                  drawNode(target_node);
                  // put node to the queue, so that all adjacent nodes
                  // will be processed as well
                  node_queue.push(target_db_node);
                }
              }

              // create and draw edge for source and target node (if not already done)
              if(graph.addEdge(node, target_node, rel_type)) {
                 drawEdge(node, target_node, rel_type);
              }
              
              graph.layout.init();
            });
          }
        });
      } else {
        if(num_requests < 1) {
          finished = true;
        }
      }
    } else {
      if(num_requests < 1) {
        finished = true;
        getRelationshipNode();        
      }
    }
    return true;
  }

  function getNodeId(db_node) {
    var node_parts = db_node.self.split("/");
    return node_parts[node_parts.length-1];
  }

  function drawNode(node) {
    var draw_object = new THREE.Mesh( geometry, [ new THREE.MeshBasicMaterial( {  color: Math.random() * 0xffffff, opacity: 0.5 } ) ] );

    // label
    // var labelCanvas = document.createElement( "canvas" );
    // var xc = labelCanvas.getContext("2d");
    // labelCanvas.width = labelCanvas.height = 128;
    // // xc.shadowColor = "#000";
    // // xc.shadowBlur = 7;
    // // xc.fillStyle = "orange";
    // xc.font = "50pt arial bold";
    // xc.fillText("myText", 10, 64);
    // 
    // var xm = new THREE.MeshBasicMaterial( { map: new THREE.Texture( labelCanvas ), transparent: true } );
    // xm.map.needsUpdate = true;


    var area = 5000;

    draw_object.position.x = Math.floor(Math.random() * (area + area + 1) - area);
    draw_object.position.y = Math.floor(Math.random() * (area + area + 1) - area);
    if(that.layout === "3d") {
      draw_object.position.z = Math.floor(Math.random() * (area + area + 1) - area);
    }
    
    // var mesh = new THREE.Mesh( new THREE.PlaneGeometry( 100, 100 ), xm );
    // mesh.position.x = draw_object.position.x;
    // mesh.position.y = draw_object.position.y;
    // mesh.doubleSided = true;
    // mesh.draw_object = draw_object;
    // mesh.updateMatrix();
    // mesh.type = "label";
    // scene.addObject(mesh);

    draw_object.id = node.id;
    node.data.draw_object = draw_object;
    node.position = draw_object.position;
    node.rotation = draw_object.rotation;
    scene.addObject( node.data.draw_object );
  }


  function drawEdge(source, target, type) {
    var color = 0x333333;
    if(type == "dislikes") {
      color = 0x00ff00;
    }
    material = new THREE.LineBasicMaterial( { color: color, opacity: 0.5, linewidth: 1 } );
    tmp_geo = new THREE.Geometry();

    tmp_geo.vertices.push(new THREE.Vertex(source.data.draw_object.position));
    tmp_geo.vertices.push(new THREE.Vertex(target.data.draw_object.position));

    geometries.push(tmp_geo);

    line = new THREE.Line( tmp_geo, material, THREE.LinePieces );
    line.scale.x = line.scale.y = line.scale.z = 1;
    line.originalScale = 1;
    scene.addObject( line );
  }


  function animate() {
    requestAnimationFrame( animate );
    render();
    if(that.show_info) {
      printInfo();
    }
  }


  function render() {
    getNodes();
    if(!graph.layout.finished) {
      info_text.calc = "<span style='color: red'>Calculating layout...</span>";
      graph.layout.generate();
    } else {
      info_text.calc = "";
    }
    
    for(var i=0; i<geometries.length; i++) {
      geometries[i].__dirtyVertices = true;
    }


    if(that.selection) {
      object_selection.render(scene, camera);
    }
  
    // scene.objects.forEach(function(obj) {
    //   if(obj.type === "label") {
    //     var delta_x = obj.position.x - obj.draw_object.position.x;
    //     var delta_y = obj.position.y - obj.draw_object.position.y;
    //     if(Math.sqrt(delta_x*delta_x) > 300) {
    //       obj.position.x = obj.draw_object.position.x;
    //     }
    //     if(Math.sqrt(delta_y*delta_y) > 300) {
    //       obj.position.y = obj.draw_object.position.y;
    //     }
    //     drawText(obj, obj.draw_object.position.y);
    //   }
    // });
  
    renderer.render( scene, camera );
    // interaction.update();
    stats.update();
  }

  function printInfo(text) {
    var str = '';
    for(var index in info_text) {
      if(str != '' && info_text[index] != '') {
        str += " - ";
      }
      str += info_text[index];
    }
    document.getElementById("graph-info").innerHTML = str;
  }


  function drawText(draw_object, text) {
    draw_object.materials[0].map.image = null;
    var textCanvas = document.createElement( "canvas" );
    var xc = textCanvas.getContext("2d");
    // xc.shadowColor = "#000";
    // xc.shadowBlur = 7;
    xc.font = "50pt arial bold";
    xc.fillText(text, 10, 64);
    draw_object.materials[0].map.image = textCanvas;
  }

  function randomFromTo(from, to) {
    return Math.floor(Math.random() * (to - from + 1) + from);
  }
}
